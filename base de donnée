from flask import Flask
import sqlite3
from sqlite3 import Date, Text, Integer, Boolean

app = Flask(__name__)

# Créer une connexion à la base de données
conn = sqlite3.connect("site_de_rencontre.db")
cursor = conn.cursor()

# Créer les tables
cursor.execute("""
CREATE TABLE IF NOT EXISTS utilisateurs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nom TEXT,
    prenom TEXT,
    email TEXT UNIQUE,
    mot_de_passe TEXT,
    date_de_naissance DATE,
    genre TEXT,
    bio TEXT,
    photo_profil TEXT,
    question1 TEXT,
    question2 TEXT,
    question3 TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS preferences (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    utilisateur_id INTEGER REFERENCES utilisateurs(id),
    genre_recherche TEXT,
    tranche_d_age_min INTEGER,
    tranche_d_age_max INTEGER,
    distance_max INTEGER,
    interets TEXT
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS correspondances (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    utilisateur_id INTEGER,
    correspondance_id INTEGER,
    date_correspondance DATE,
    statut TEXT,
    FOREIGN KEY(utilisateur_id) REFERENCES utilisateurs(id),
    FOREIGN KEY(correspondance_id) REFERENCES utilisateurs(id)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    expediteur_id INTEGER REFERENCES utilisateurs(id),
    destinataire_id INTEGER REFERENCES utilisateurs(id),
    message TEXT,
    date_envoi DATE,
    lu BOOLEAN
)
""")

conn.commit()

def get_preferences():
    cursor.execute("SELECT * FROM utilisateurs JOIN preferences ON utilisateurs.id = preferences.utilisateur_id")
    utilisateurs = cursor.fetchall()

    preferences_hommes = []
    preferences_femmes = []

    for utilisateur in utilisateurs:
        id, nom, prenom, email, mot_de_passe, date_de_naissance, genre, bio, photo_profil, question1, question2, question3, pref_id, utilisateur_id, genre_recherche, tranche_d_age_min, tranche_d_age_max, distance_max, interets = utilisateur

        if genre == "homme":
            preferences = []
            for utilisateur_femme in utilisateurs:
                _, _, _, _, _, _, genre_femme, _, _, _, _, _, _, _, _, _, _, _, _ = utilisateur_femme
                if genre_femme == "femme" and genre_recherche == "femme":
                    age = (date_de_naissance - utilisateur_femme[5]).days // 365
                    if tranche_d_age_min <= age <= tranche_d_age_max:
                        preferences.append(utilisateur_femme[0])
            preferences_hommes.append((id, preferences))

        elif genre == "femme":
            preferences = []
            for utilisateur_homme in utilisateurs:
                _, _, _, _, _, _, genre_homme, _, _, _, _, _, _, _, _, _, _, _, _ = utilisateur_homme
                if genre_homme == "homme" and genre_recherche == "homme":
                    age = (date_de_naissance - utilisateur_homme[5]).days // 365
                    if tranche_d_age_min <= age <= tranche_d_age_max:
                        preferences.append(utilisateur_homme[0])
            preferences_femmes.append((id, preferences))

    return preferences_hommes, preferences_femmes

def gale_shapley(preferences_hommes, preferences_femmes):
    correspondances = {}

    for homme, preferences in preferences_hommes:
        correspondances[homme] = None

    def propose(homme, femme):
        if correspondances[femme] is None or correspondances[femme] < homme:
            return femme
        return None

    libres = set(homme for homme, _ in preferences_hommes)

    while libres:
        homme = libres.pop()
        for femme in preferences_hommes[homme - 1]:
            result = propose(homme, femme)
            if result is not None:
                correspondances[femme] = homme
                correspondances[homme] = femme
                break
        else:
            libres.add(homme)

    return correspondances

def save_correspondances(couples):
    for homme, femme in couples.items():
        if homme is not None and femme is not None:
            cursor.execute("INSERT INTO correspondances (utilisateur_id, correspondance_id, date_correspondance, statut) VALUES (?, ?, ?, ?)", (homme, femme, Date('now'), 'stable'))

    conn.commit()

@app.route('/')
def hello_world():
    return 'Hello World!'

@app.route('/calculer_correspondances')
def calculer_correspondances():
    preferences_hommes, preferences_femmes = get_preferences()
    couples_stables = gale_shapley(preferences_hommes, preferences_femmes)
    save_correspondances(couples_stables)
    return 'Les correspondances stables ont été calculées et enregistrées.'

if __name__ == '__main__':
    app.run()
