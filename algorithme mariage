import sqlite3
from datetime import date
from flask import Flask, request

app = Flask(__name__)

# Connexion à la base de données SQLite
conn = sqlite3.connect("rencontres.db")
cursor = conn.cursor()

def get_preferences():
    cursor.execute("SELECT * FROM utilisateurs JOIN preferences ON utilisateurs.id = preferences.utilisateur_id")
    utilisateurs = cursor.fetchall()

    preferences = []

    for utilisateur in utilisateurs:
        id, nom, prenom, email, mot_de_passe, date_de_naissance, genre, bio, photo_profil, question1, question2, question3, pref_id, utilisateur_id, genre_recherche, tranche_d_age_min, tranche_d_age_max, distance_max, interets = utilisateur

        preferences_utilisateur = []
        for autre_utilisateur in utilisateurs:
            autre_id, _, _, _, _, _, autre_genre, _, _, _, _, _, _, _, _, _, _, _, _ = autre_utilisateur
            if autre_genre == genre_recherche:
                age = (date_de_naissance - autre_utilisateur[5]).days // 365
                if tranche_d_age_min <= age <= tranche_d_age_max:
                    preferences_utilisateur.append(autre_id)
        preferences.append((id, preferences_utilisateur))

    return preferences

def gale_shapley(preferences):
    correspondances = {}

    for personne, preferences in preferences:
        correspondances[personne] = None

    def propose(personne1, personne2):
        if correspondances[personne2] is None or correspondances[personne2] < personne1:
            return personne2
        return None

    libres = set(personne for personne, _ in preferences)

    while libres:
        personne1 = libres.pop()
        for personne2 in preferences[personne1 - 1]:
            result = propose(personne1, personne2)
            if result is not None:
                correspondances[personne2] = personne1
                correspondances[personne1] = personne2
                break
        else:
            libres.add(personne1)

    return correspondances

def save_correspondances(couples):
    for personne1, personne2 in couples.items():
        if personne1 is not None and personne2 is not None:
            cursor.execute("INSERT INTO correspondances (utilisateur_id, correspondance_id, date_correspondance, statut) VALUES (?, ?, ?, ?)", (personne1, personne2, date('now'), 'stable'))

    conn.commit()

@app.route('/')
def hello_world():
    return 'Hello World!'

@app.route('/calculer_correspondances')
def calculer_correspondances():
    preferences = get_preferences()
    couples_stables = gale_shapley(preferences)
    save_correspondances(couples_stables)
    return 'Les correspondances stables ont été calculées et enregistrées.'

if __name__ == '__main__':
    app.run()

